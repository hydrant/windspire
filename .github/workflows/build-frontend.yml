# Frontend Build and Deployment
#
# Builds and deploys the frontend application to Azure Static Web Apps
# - Only runs on tagged releases for controlled deployments
# - Focuses purely on building and deploying artifacts (no quality checks)
# - Depends on infrastructure pipeline to provide deployment targets
#
# DEPENDENCY: Requires build-infrastructure.yml to run first and set Azure secrets

name: Frontend Build

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      static-web-app-url:
        required: true
        type: string
      deployment-token:
        required: true
        type: string
      container-app-url:
        required: true
        type: string
    secrets:
      API_BASE_URL:
        required: true
      FIREBASE_API_KEY:
        required: true
      FIREBASE_AUTH_DOMAIN:
        required: true
      FIREBASE_PROJECT_ID:
        required: true
      FIREBASE_STORAGE_BUCKET:
        required: true
      FIREBASE_MESSAGING_SENDER_ID:
        required: true
      FIREBASE_APP_ID:
        required: true

jobs:
  # Build job - creates production artifacts
  build_frontend:
    runs-on: ubuntu-latest
    name: Build Frontend
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: windspire_frontend_svelte_csr
    outputs:
      environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      # Set up Node.js with caching
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: windspire_frontend_svelte_csr/package-lock.json

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Build frontend for production
      - name: Build frontend
        run: npm run build
        env:
          NODE_ENV: production
          VITE_API_BASE_URL: ${{ inputs.container-app-url }}
          VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}

      # Upload build artifacts for deployment
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist-${{ inputs.environment }}
          path: windspire_frontend_svelte_csr/dist/
          retention-days: 7

  # Deploy job - deploys frontend to Azure Static Web Apps
  deploy_frontend:
    needs: build_frontend
    runs-on: ubuntu-latest
    name: Deploy Frontend to Static Web App
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      # Download frontend build artifacts
      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist-${{ inputs.environment }}
          path: ./windspire_frontend_svelte_csr/dist

      # Deploy to Azure Static Web Apps (frontend only)
      - name: Deploy to Azure Static Web Apps
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ inputs.deployment-token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "./windspire_frontend_svelte_csr/dist"
          api_location: ""  # No API - backend deployed separately to Function App
          skip_app_build: true  # We already built the app
          output_location: ""   # Static files are already in the right place
          # Let Azure decide the deployment target based on API token

      # Output deployment results
      - name: Output deployment results
        run: |
          echo "‚úÖ Frontend deployed successfully!"
          echo "üåê Environment: ${{ inputs.environment }}"
          echo "üì¶ Frontend URL: ${{ steps.deploy.outputs.static_web_app_url }}"
          echo "üîß Backend API: ${{ inputs.container-app-url }}"
          echo ""
          echo "üöÄ Frontend is now live and ready for users!"