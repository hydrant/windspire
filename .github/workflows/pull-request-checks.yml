# Pull Request Quality Gates
#
# Runs quality checks on pull requests to ensure code quality before merging
# - Code formatting checks
# - Linting and static analysis
# - Unit tests
# - Security audits
# - Type checking
#
# This pipeline focuses purely on quality gates and does NOT build or deploy artifacts

name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  # Frontend quality checks
  frontend_checks:
    if: ${{ contains(github.event.pull_request.changed_files, 'windspire_frontend_svelte_csr/') || contains(github.event.pull_request.changed_files, '.github/workflows/') }}
    runs-on: ubuntu-latest
    name: Frontend Quality Checks
    defaults:
      run:
        working-directory: windspire_frontend_svelte_csr
    steps:
      - uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: windspire_frontend_svelte_csr/package-lock.json

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Lint frontend code
      - name: Lint frontend
        run: npm run lint
        continue-on-error: false

      # Type check frontend
      - name: Type check frontend
        run: npm run check
        continue-on-error: false

      # Run frontend unit tests
      - name: Test frontend
        run: npm run test:unit
        continue-on-error: false

      # Verify build can complete (without deploying)
      - name: Verify build
        run: npm run build
        env:
          VITE_API_BASE_URL: https://example.com/api  # Dummy URL for build verification
          VITE_FIREBASE_CONFIG: ${{ secrets.VITE_FIREBASE_CONFIG || '{}' }}

  # Backend quality checks
  backend_checks:
    if: ${{ contains(github.event.pull_request.changed_files, 'windspire_backend/') || contains(github.event.pull_request.changed_files, '.github/workflows/') }}
    runs-on: ubuntu-latest
    name: Backend Quality Checks
    defaults:
      run:
        working-directory: windspire_backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: windspire_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      # Set up Rust
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            windspire_backend/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('windspire_backend/**/Cargo.lock') }}

      # Install SQLx CLI
      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      # Setup test database
      - name: Setup test database
        run: |
          sqlx database create
          sqlx migrate run
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/windspire_test

      # Check code formatting
      - name: Check formatting
        run: cargo fmt --all -- --check
        continue-on-error: false

      # Run Clippy linting
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        continue-on-error: false
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/windspire_test

      # Run unit tests
      - name: Run tests
        run: cargo test --verbose
        continue-on-error: false
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/windspire_test
          RUST_LOG: debug

      # Verify build can complete (without deploying)
      - name: Verify build
        run: cargo check --release
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/windspire_test

  # Security audit for backend
  security_audit:
    if: ${{ contains(github.event.pull_request.changed_files, 'windspire_backend/') || contains(github.event.pull_request.changed_files, '.github/workflows/') }}
    runs-on: ubuntu-latest
    name: Security Audit
    defaults:
      run:
        working-directory: windspire_backend
    steps:
      - uses: actions/checkout@v4
      
      # Set up Rust
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      # Install cargo-audit
      - name: Install cargo-audit
        run: cargo install cargo-audit

      # Run security audit
      - name: Run security audit
        run: cargo audit
        continue-on-error: false

  # Infrastructure validation (if infrastructure files changed)
  infrastructure_checks:
    if: ${{ contains(github.event.pull_request.changed_files, 'infrastructure/') || contains(github.event.pull_request.changed_files, '.github/workflows/') }}
    runs-on: ubuntu-latest
    name: Infrastructure Validation
    steps:
      - uses: actions/checkout@v4

      # Azure Login for validation
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Validate Bicep template syntax
      - name: Validate Bicep template
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP }}
          template: infrastructure/main.bicep
          parameters: infrastructure/main.parameters.json
          deploymentMode: Validate

  # Summary job that depends on all checks
  all_checks_passed:
    needs: [frontend_checks, backend_checks, security_audit, infrastructure_checks]
    if: always()
    runs-on: ubuntu-latest
    name: All Quality Checks
    steps:
      - name: Check all jobs passed
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: |
          echo "One or more quality checks failed"
          exit 1
      
      - name: All checks passed
        run: echo "All quality checks passed successfully"