name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
      - static_web_app_refactor
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false

      # Set up Node.js for frontend build
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: windspire_frontend_svelte_csr/pnpm-lock.yaml

      # Set up Rust for backend build
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl

      # Cache Rust dependencies
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            windspire_backend/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('windspire_backend/**/Cargo.lock') }}

      # Install pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd windspire_frontend_svelte_csr
          pnpm install

      # Build frontend for static hosting
      - name: Build frontend
        run: |
          cd windspire_frontend_svelte_csr
          pnpm build
        env:
          VITE_API_BASE_URL: https://your-app-name.azurestaticapps.net/api
          VITE_FIREBASE_CONFIG: ${{ secrets.VITE_FIREBASE_CONFIG }}

      # Install SQLx CLI for database migrations
      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      # Run database migrations
      - name: Run database migrations
        run: |
          cd windspire_backend
          sqlx migrate run
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # Build Rust backend for Azure Functions
      - name: Build Rust backend
        run: |
          cd windspire_backend
          cargo build --release --target x86_64-unknown-linux-musl
          
          # Copy binary to expected Azure Functions location
          mkdir -p api
          cp target/x86_64-unknown-linux-musl/release/windspire_backend api/
          
          # Copy Azure Functions configuration
          cp host.json api/
          
          # Create function.json for each route (Azure Functions requirement)
          mkdir -p api/users api/boats api/countries api/auth api/health
          
          # Create function.json files for each endpoint
          cat > api/users/function.json << 'EOF'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "route": "users/{*restOfPath:alpha?}"
              },
              {
                "type": "http",
                "direction": "out",
                "name": "res"
              }
            ]
          }
          EOF
          
          cat > api/boats/function.json << 'EOF'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "route": "boats/{*restOfPath:alpha?}"
              },
              {
                "type": "http",
                "direction": "out",
                "name": "res"
              }
            ]
          }
          EOF
          
          cat > api/countries/function.json << 'EOF'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "route": "countries/{*restOfPath:alpha?}"
              },
              {
                "type": "http",
                "direction": "out",
                "name": "res"
              }
            ]
          }
          EOF
          
          cat > api/auth/function.json << 'EOF'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "route": "auth/{*restOfPath:alpha?}"
              },
              {
                "type": "http",
                "direction": "out",
                "name": "res"
              }
            ]
          }
          EOF
          
          cat > api/health/function.json << 'EOF'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "route": "health"
              },
              {
                "type": "http",
                "direction": "out",
                "name": "res"
              }
            ]
          }
          EOF

      # Deploy to Azure Static Web Apps
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          ###### Repository/Build Configurations ######
          app_location: "windspire_frontend_svelte_csr/dist"
          api_location: "windspire_backend/api"
          output_location: ""
          ###### Environment Variables ######
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close"