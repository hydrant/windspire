# Backend CI/CD Pipeline
#
# Handles backend-only builds and deployments
# - Builds and tests on changes to backend code
# - Deploys only on tagged releases (test* or release*)

name: Backend CI/CD

on:
  push:
    branches: [ main, 'feature/**', 'fix/**' ]
    paths:
      - 'windspire_backend/**'
      - '.github/workflows/backend-ci-cd.yml'
    tags:
      - 'test*'
      - 'release*'
  pull_request:
    branches: [ main ]
    paths:
      - 'windspire_backend/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build and test job
  build_and_test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: windspire_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        targets: x86_64-unknown-linux-musl

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          windspire_backend/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('windspire_backend/**/Cargo.lock') }}

    - name: Install SQLx CLI
      run: cargo install sqlx-cli --no-default-features --features rustls,postgres

    - name: Setup test database
      run: |
        cd windspire_backend
        sqlx database create
        sqlx migrate run
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/windspire_test

    - name: Check formatting
      run: |
        cd windspire_backend
        cargo fmt --all -- --check

    - name: Run Clippy
      run: |
        cd windspire_backend
        cargo clippy --all-targets --all-features -- -D warnings
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/windspire_test

    - name: Run tests
      run: |
        cd windspire_backend
        cargo test --verbose
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/windspire_test
        RUST_LOG: debug

    - name: Build for release
      run: |
        cd windspire_backend
        cargo build --release --target x86_64-unknown-linux-musl
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/windspire_test

    # Upload build artifacts for deployment (only for tags)
    - name: Upload build artifacts
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: backend-binary
        path: windspire_backend/target/x86_64-unknown-linux-musl/release/windspire_backend

  # Security audit job
  security_audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: |
        cd windspire_backend
        cargo audit

  # Deploy job - runs only on tags
  deploy_backend:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build_and_test, security_audit]
    runs-on: ubuntu-latest
    name: Deploy Backend
    environment: 
      name: ${{ startsWith(github.ref, 'refs/tags/release') && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      # Download build artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-binary
          path: windspire_backend/target/x86_64-unknown-linux-musl/release/

      # Install SQLx CLI for database migrations
      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      # Run database migrations
      - name: Run database migrations
        run: |
          cd windspire_backend
          sqlx migrate run
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # Prepare Azure Functions structure
      - name: Prepare Azure Functions
        run: |
          cd windspire_backend
          chmod +x target/x86_64-unknown-linux-musl/release/windspire_backend
          
          # Copy binary to expected Azure Functions location
          mkdir -p api
          cp target/x86_64-unknown-linux-musl/release/windspire_backend api/
          
          # Copy Azure Functions configuration if it exists
          [ -f host.json ] && cp host.json api/ || echo "No host.json found"
          
          # Create function.json for each route (Azure Functions requirement)
          mkdir -p api/users api/boats api/countries api/auth api/health
          
          # Create function.json files for each endpoint
          cat > api/users/function.json << 'EOF'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "route": "users/{*restOfPath:alpha?}"
              },
              {
                "type": "http",
                "direction": "out",
                "name": "res"
              }
            ]
          }
          EOF
          
          cat > api/boats/function.json << 'EOF'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "route": "boats/{*restOfPath:alpha?}"
              },
              {
                "type": "http",
                "direction": "out",
                "name": "res"
              }
            ]
          }
          EOF
          
          cat > api/countries/function.json << 'EOF'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "route": "countries/{*restOfPath:alpha?}"
              },
              {
                "type": "http",
                "direction": "out",
                "name": "res"
              }
            ]
          }
          EOF
          
          cat > api/auth/function.json << 'EOF'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "route": "auth/{*restOfPath:alpha?}"
              },
              {
                "type": "http",
                "direction": "out",
                "name": "res"
              }
            ]
          }
          EOF
          
          cat > api/health/function.json << 'EOF'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "route": "health"
              },
              {
                "type": "http",
                "direction": "out",
                "name": "res"
              }
            ]
          }
          EOF

      # Deploy backend API to Azure Functions (if you have a separate backend deployment)
      # This section would need to be customized based on your Azure setup
      - name: Deploy to Azure Functions
        run: |
          echo "Backend deployment ready. API files prepared in windspire_backend/api/"
          echo "You may need to configure separate Azure Functions deployment here."
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}